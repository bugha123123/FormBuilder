@using FormBuilder.Interface
@using FormBuilder.Models
@using FormBuilder.Enums
@model FormTemplate
@inject IUserService _userService;
@inject ICommentService _commentService;
@inject ITemplateService _templateService;
@{

    var comments = await _commentService.GetComments(
        formId: null,
        templateId: Model.Id,
        commentTargetType: CommentTargetType.Template
    ) ?? new List<Comment>();
}
<header class="bg-white shadow-sm border-b">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
            <div class="flex items-center space-x-3">
                @if (Model.User.UserName == User.Identity.Name || User.IsInRole("Admin"))
                {
                    <a asp-action="Edit" asp-controller="Template" asp-route-templateId="@Model.Id">
                        <button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-edit mr-2"></i>Edit Template
                        </button>
                    </a>
                }
                <a asp-controller="Forms" asp-action="Create" asp-route-TemplateId="@Model.Id">
                    <button class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
                        <i class="fas fa-play mr-2"></i>Use Template
                    </button>
                </a>
            </div>
        </div>
    </div>
</header>

<main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Main Content -->
        <div class="lg:col-span-2 space-y-6">
            <!-- Template Header -->
            <div class="bg-white rounded-lg shadow-sm border p-6">
                <div class="flex flex-col lg:flex-row justify-between gap-6">
                    <div class="flex-1">
                        <div class="flex items-center space-x-3 mb-2">
                            <h1 class="text-2xl font-bold text-gray-900">@Model.Title</h1>

                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                <i class="fas fa-globe mr-1"></i>@(Model.isPublic ? "Public" : "Private")
                            </span>
                        </div>
                        <div class="mb-4">
                            @if (await _templateService.IsTemplateLikedByUser(Model.Id))
                            {
                                <form asp-action="UnlikeTemplate" method="post">
                                    <input type="hidden" name="id" value="@Model.Id" />
                                    <button type="submit" class="flex items-center space-x-2 text-red-600 hover:text-red-800 transition">
                                        <i class="fas fa-heart"></i>
                                        <span>Unlike</span>
                                    </button>
                                </form>
                            }
                            else
                            {
                                <form asp-action="LikeTemplate" method="post">
                                    <input type="hidden" name="id" value="@Model.Id" />
                                    <button type="submit" class="flex items-center space-x-2 text-gray-600 hover:text-red-600 transition">
                                        <i class="far fa-heart"></i>
                                        <span>Like</span>
                                    </button>
                                </form>
                            }
                        </div>

                        <p class="text-gray-600 text-lg mb-4">@Html.Raw(Model.Description)</p>

                        <div class="flex items-center space-x-6 text-sm text-gray-500">
                            <div class="flex items-center">
                                <i class="fas fa-calendar mr-2"></i>
                                <span>@Model.CreatedAt.ToString("yyyy-MM-dd")</span>
                            </div>
                            <div class="flex items-center">
                                <i class="fas fa-user mr-2"></i>
                                <span>By: @Model.User?.UserName?.Substring(0, Math.Min(7, Model.User.UserName.Length))</span>
                            </div>
                            <div class="flex items-center">
                                <i class="fas fa-hashtag mr-2"></i>
                                <span>ID: #@Model.Id</span>
                            </div>
                        </div>
                    </div>

                    <div class="flex-shrink-0">
                        <img src="@(Model.ImageUrl != null ? Model.ImageUrl.Replace("/upload/", "/upload/c_fill,w_400,h_200/") : "/placeholder.svg?height=200&width=400")"
                             alt="@($"{Model.Title} preview")"
                             class="object-cover rounded-lg w-80 h-40" />
                    </div>
                </div>
            </div>

            <!-- Tags -->
            <div class="bg-white rounded-lg shadow-sm border p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Tags</h3>
                <div class="flex flex-wrap gap-2">
                    @foreach (var tag in Model.SavedTags ?? new List<string>())
                    {
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">@tag</span>
                    }
                </div>
            </div>

            <!-- Questions -->
            <div class="space-y-6">
                @for (int i = 0; i < Model.Questions.Count; i++)
                {
                    var question = Model.Questions[i];
                    <div class="border-l-4 border-blue-500 pl-4">
                        <div class="flex items-center justify-between mb-2">
                            <h4 class="font-medium text-gray-900">@($"{i + 1}. {question.Text}")</h4>
                            <span class="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">@question.Type</span>
                        </div>

                        @switch (question.Type)
                        {
                            case QuestionType.ShortText:
                            case QuestionType.LongText:
                            case QuestionType.Number:
                                break;

                            case QuestionType.Checkbox:
                                <div class="space-y-1">
                                    @foreach (var option in question.Options)
                                    {
                                        <div class="flex items-center">
                                            <input type="checkbox" class="form-checkbox" id="@($"chk_{i}_{option}")" />
                                        </div>
                                    }
                                </div>
                                break;

                            case QuestionType.Dropdown:
                                <select class="form-select mt-1 block w-full">
                                    @foreach (var option in question.Options)
                                    {
                                        <option>@option</option>
                                    }
                                </select>
                                break;
                        }
                    </div>
                }
            </div>

            <!-- Add Comment Section -->
            <div class="mt-8 max-w-4xl">
                <div class="bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden">
                    <div class="p-6">
                        <h4 class="text-lg font-semibold text-slate-900 mb-4 flex items-center">
                            <svg class="w-5 h-5 mr-2 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            Add a Comment
                        </h4>

                        <form asp-action="AddTemplateComment" asp-controller="Comment" method="post" class="space-y-4">
                            <input type="hidden" name="templateId" value="@Model.Id" />
                            <textarea name="Text" rows="4" required
                                      class="w-full border border-slate-300 rounded-xl px-4 py-3 bg-slate-50 focus:bg-white focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all duration-200 text-slate-900 resize-none"
                                      placeholder="Share your thoughts or feedback..."></textarea>

                            <div>
                                <button type="submit"
                                        class="px-6 py-2 bg-emerald-600 text-white font-semibold rounded-xl hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 transition-all duration-200 shadow-sm">
                                    Post Comment
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Comments Section -->
            <div class="bg-white rounded-lg shadow-sm border p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Comments</h3>

                @if (comments != null && comments.Any())
                {
                    <div class="space-y-4">
                        @foreach (var comment in comments.OrderByDescending(c => c.PostedAt))
                        {
                            <div class="border border-slate-200 rounded-xl p-4">
                                <p class="text-gray-800 mb-1">@comment.Text</p>
                                <div class="text-xs text-gray-500">
                                    Posted by <span class="font-medium">@comment.user?.UserName</span> on @(comment.PostedAt.ToString("yyyy-MM-dd HH:mm"))
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-gray-500 text-sm">No comments yet. Be the first to comment!</p>
                }
            </div>
        </div>

        <!-- Sidebar -->
        <div class="space-y-6">
            <!-- Template Stats -->
            <div class="bg-white rounded-lg shadow-sm border p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Template Statistics</h3>
                <div class="space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">Total Questions</span>
                        <span class="font-semibold text-gray-900">@Model.Questions.Count()</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">Times Used</span>
                        <span class="font-semibold text-gray-900">
                            @(ViewData["TimesUsed"] ?? 0)
                        </span>
                    </div>

          
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">Completion Rate</span>
                        <span class="font-semibold text-green-600">
                            @{
                                var completionRate = ViewData["CompletionRate"];
                                if (completionRate != null)
                                {
                                    <text>@(((double)completionRate * 100).ToString("0.##")).%</text>
                                }
                                else
                                {
                                    <text>0%</text>
                                }
                            }
                        </span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">Average Likes</span>
                        <span class="font-semibold text-gray-900">
                            @String.Format("{0:0.##}", ViewData["AverageLikesAcrossTemplates"] ?? 0)
                        </span>
                    </div>


                </div>
            </div>

            <!-- Assigned Users -->
            <div class="bg-white rounded-lg shadow-sm border p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Assigned Users</h3>
                <div class="space-y-3">
                    @if (Model.AssignedUsers != null && Model.AssignedUsers.Any())
                    {
                        foreach (var user in Model.AssignedUsers)
                        {
                            <div class="flex items-center space-x-3">
                                <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm font-medium">
                                    @user?.Substring(0, 1).ToUpper()
                                </div>
                                <span class="text-sm text-gray-800">@user</span>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-sm text-gray-500">No assigned users.</p>
                    }

                    @if (Model.User.UserName == User.Identity.Name)
                    {
                        <button onclick="openUserModal()" class="w-full text-left text-sm text-blue-600 hover:text-blue-800 font-medium mt-2">
                            <i class="fas fa-plus mr-1"></i>Add more users
                        </button>
                    }
                </div>
            </div>

            <!-- Template Actions -->
            <div class="bg-white rounded-lg shadow-sm border p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Actions</h3>
                <div class="space-y-3">
                    <button class="w-full flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        <i class="fas fa-copy mr-2"></i>Duplicate Template
                    </button>
                    <button class="w-full flex items-center justify-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                        <i class="fas fa-share mr-2"></i>Share Template
                    </button>
                    <button class="w-full flex items-center justify-center px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors">
                        <i class="fas fa-download mr-2"></i>Export Template
                    </button>
                    <button class="w-full flex items-center justify-center px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors">
                        <i class="fas fa-archive mr-2"></i>Archive Template
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div id="userModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative">
            <h2 class="text-xl font-semibold mb-4">Add Users</h2>
            <form asp-action="AssignUser" asp-controller="Template" method="post">
                <input name="TemplateId" value="@Model.Id" hidden />
                <select name="email" id="userDropdown" class="w-full border border-gray-300 rounded px-4 py-2 mb-4" onchange="checkUserSelected()">
                    <option value="" disabled selected>Select a user...</option>
                    @foreach (var user in await _userService.GetUsers(Model.Id))
                    {
                        <option value="@user.Email">@user.Email</option>
                    }
                </select>
                <div class="flex justify-end space-x-2">
                    <button onclick="closeUserModal()" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400" type="button">Cancel</button>
                    <button id="addUserBtn" class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed" type="submit" disabled>
                        Add
                    </button>
                </div>
            </form>
            <button onclick="closeUserModal()" class="absolute top-2 right-2 text-gray-400 hover:text-gray-600 text-xl">&times;</button>
        </div>
    </div>
</main>

<script>
    function openUserModal() {
        document.getElementById('userModal').classList.remove('hidden');
    }

    function closeUserModal() {
        document.getElementById('userModal').classList.add('hidden');
    }

    function checkUserSelected() {
        const dropdown = document.getElementById('userDropdown');
        const addButton = document.getElementById('addUserBtn');
        addButton.disabled = !dropdown.value;
    }
</script>
