@using FormBuilder.Enums
@using FormBuilder.Interface
@using FormBuilder.Models
@model Form
@inject IFormService _formService;
@inject ICommentService _commentService;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form Submission #@Model.Id - FormBuilder</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center py-6 space-y-4 sm:space-y-0">
                <div class="flex flex-col sm:flex-row sm:items-center sm:space-x-6 space-y-4 sm:space-y-0">
                    <a  class="text-gray-500 hover:text-gray-700 flex items-center transition-colors" asp-action="User" asp-controller="Dashboard">
                        <i class="fas fa-arrow-left mr-2"></i>
                        Back to Forms
                    </a>
                    <div class="hidden sm:block h-6 border-l border-gray-300"></div>
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">Form Submission #@Model.Id</h1>
                        <p class="text-sm text-gray-500 mt-1">@Model.Template.Title</p>
                    </div>
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                        <i class="fas fa-check-circle mr-2"></i>
                        Successfully Submitted
                    </span>
                </div>
                <div class="flex items-center space-x-3">
                    <button class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors">
                        <i class="fas fa-download mr-2"></i>
                        Export Data
                    </button>
                </div>
            </div>
        </div>
    </header>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Main Content -->
            <div class="lg:col-span-2 space-y-8">
                <!-- Form Information -->
                <div class="bg-white shadow-sm rounded-lg overflow-hidden border border-gray-200">
                    <div class="px-6 py-4 bg-blue-50 border-b border-blue-100">
                        <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-info-circle mr-3 text-blue-500"></i>
                            Form Information
                        </h2>
                    </div>
                    <div class="px-6 py-6">
                        <dl class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                            <div class="bg-gray-50 p-4 rounded-lg border border-gray-100">
                                <dt class="text-sm font-medium text-gray-500 mb-3">Form Details</dt>
                                <div class="space-y-2">
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-gray-600">Form ID:</span>
                                        <span class="text-sm font-mono text-gray-900 bg-white px-2 py-1 rounded">#@Model.Id</span>
                                    </div>
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-gray-600">Template ID:</span>
                                        <span class="text-sm font-mono text-gray-900 bg-white px-2 py-1 rounded">#@Model.TemplateId</span>
                                    </div>
                                </div>
                            </div>
                            <div class="bg-gray-50 p-4 rounded-lg border border-gray-100">
                                <dt class="text-sm font-medium text-gray-500 mb-3">User Information</dt>
                                <div class="space-y-2">
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-gray-600">User ID:</span>
                                        <span class="text-sm font-mono text-gray-900 bg-white px-2 py-1 rounded">@Model.User.UserName.Substring(0, 7)</span>
                                    </div>
                                </div>
                            </div>
                            @{
                                var submittedAt = Model.SubmittedAt;
                                var timeAgo = DateTime.Now - submittedAt;
                                string agoText = timeAgo.TotalHours < 1
                                ? $"{timeAgo.Minutes} minutes ago"
                                : timeAgo.TotalHours < 24
                                ? $"{(int)timeAgo.TotalHours} hours ago"
                                : $"{(int)timeAgo.TotalDays} days ago";
                            }

                            <div class="sm:col-span-2 bg-blue-50 p-4 rounded-lg border border-blue-100">
                                <dt class="text-sm font-medium text-gray-500 mb-3">Submission Timestamp</dt>
                                <dd class="text-lg text-gray-900 flex flex-col sm:flex-row sm:items-center">
                                    <div class="flex items-center">
                                        <i class="fas fa-calendar-alt mr-3 text-blue-500"></i>
                                        @submittedAt.ToString("MMM dd, yyyy h:mm tt")
                                    </div>
                                    <span class="sm:ml-4 text-sm text-gray-500 mt-1 sm:mt-0">(@agoText)</span>
                                </dd>
                            </div>
                        </dl>
                    </div>
                </div>

                <!-- Form Answers -->
                <div class="bg-white shadow-sm rounded-lg overflow-hidden border border-gray-200">
                    <div class="px-6 py-4 bg-green-50 border-b border-green-100">
                        <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-question-circle mr-3 text-green-500"></i>
                            Form Answers
                        </h2>
                    </div>
                    <div class="p-6 space-y-6">
                        @foreach (var answer in Model.Answers)
                        {
                            var colorClasses = answer.QuestionType switch
                            {
                                QuestionType.ShortText => new { border = "border-blue-200", bg = "bg-blue-50", badge = "bg-blue-500", badgeBg = "bg-blue-100", badgeText = "text-blue-800", innerBorder = "border-blue-200" },
                                QuestionType.LongText => new { border = "border-indigo-200", bg = "bg-indigo-50", badge = "bg-indigo-500", badgeBg = "bg-indigo-100", badgeText = "text-indigo-800", innerBorder = "border-indigo-200" },
                                QuestionType.Number => new { border = "border-pink-200", bg = "bg-pink-50", badge = "bg-pink-500", badgeBg = "bg-pink-100", badgeText = "text-pink-800", innerBorder = "border-pink-200" },
                                QuestionType.Checkbox => new { border = "border-red-200", bg = "bg-red-50", badge = "bg-red-500", badgeBg = "bg-red-100", badgeText = "text-red-800", innerBorder = "border-red-200" },
                                QuestionType.Dropdown => new { border = "border-yellow-200", bg = "bg-yellow-50", badge = "bg-yellow-500", badgeBg = "bg-yellow-100", badgeText = "text-yellow-800", innerBorder = "border-yellow-200" },
                                QuestionType.OneFromList => new { border = "border-green-200", bg = "bg-green-50", badge = "bg-green-500", badgeBg = "bg-green-100", badgeText = "text-green-800", innerBorder = "border-green-200" },
                                _ => new { border = "border-gray-200", bg = "bg-gray-50", badge = "bg-gray-500", badgeBg = "bg-gray-100", badgeText = "text-gray-800", innerBorder = "border-gray-200" }
                            };

                            <div class="@colorClasses.border @colorClasses.bg rounded-lg p-4 border transition-all hover:shadow-sm">
                                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-3 space-y-2 sm:space-y-0">
                                    <div class="flex items-center space-x-3">
                                        <span class="w-8 h-8 @colorClasses.badge text-white rounded-full flex items-center justify-center text-sm font-medium">
                                            @answer.QuestionId
                                        </span>
                                        <dt class="text-base font-medium text-gray-900">Question ID: @answer.QuestionId</dt>
                                    </div>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @colorClasses.badgeBg @colorClasses.badgeText">
                                        @answer.QuestionType
                                    </span>
                                </div>

                                <dd class="text-gray-700 ml-0 sm:ml-11 text-base">
                                    @if (answer.QuestionType == QuestionType.LongText)
                                    {
                                        <div class="leading-relaxed bg-white p-4 rounded-md border @colorClasses.innerBorder">
                                            @answer.Response
                                        </div>
                                    }
                                    else if (answer.QuestionType == QuestionType.Checkbox)
                                    {
                                        var options = (answer.Response ?? "").Split(",").ToList();
                                        <div class="flex flex-wrap gap-2">
                                            @foreach (var opt in options)
                                            {
                                                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                                                    <i class="fas fa-check mr-1"></i> @opt.Trim()
                                                </span>
                                            }
                                        </div>
                                    }
                                    else if (answer.QuestionType == QuestionType.Dropdown || answer.QuestionType == QuestionType.OneFromList)
                                    {
                                        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @colorClasses.badgeBg @colorClasses.badgeText">
                                            @answer.Response
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="bg-white px-3 py-2 rounded border @colorClasses.innerBorder">@answer.Response</span>
                                    }
                                </dd>
                            </div>
                        }
                    </div>
                </div>

                <!-- Internal Comments -->
                <div class="bg-white shadow-sm rounded-lg overflow-hidden border border-gray-200">
                    <div class="px-6 py-4 bg-purple-50 border-b border-purple-100">
                        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0">
                            <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                                <i class="fas fa-comments mr-3 text-purple-500"></i>
                                Internal Comments
                            </h2>
                            @{
                                var comments = await _commentService.GetComments(formId: Model.Id, commentTargetType: CommentTargetType.Form);
                            }


                            <span class="text-sm text-gray-500 bg-white px-3 py-1 rounded-full">@comments.Count() comments</span>
                        </div>
                    </div>

                    <!-- Add Comment Form -->
                    <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
                        <div class="flex flex-col sm:flex-row sm:space-x-4 space-y-4 sm:space-y-0">
                            <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
                                <span class="text-white font-medium text-sm">AD</span>
                            </div>
                            <div class="flex-1">
                                <form asp-action="AddFormComment" asp-controller="Comment" method="post">
                                    <input hidden name="formId" value="@Model.Id" />
                                    <textarea placeholder="Add a comment about this submission..." name="text" rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-lg text-sm text-black focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none transition-colors"></textarea>
                                    <div class="flex flex-col sm:flex-row sm:justify-end sm:items-center mt-3 space-y-3 sm:space-y-0">
                                        <button type="submit" class="px-4 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 transition-colors">
                                            <i class="fas fa-comment mr-2"></i>
                                            Add Comment
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Comments List -->
                    <div class="divide-y divide-gray-200">
                       @if (comments != null && comments.Any())

                        {@foreach (var comment in comments)
                            {
                                var userInitials = comment.user.UserName.Length >= 2 ? comment.user.UserName.Substring(0, 2).ToUpper() : comment.user.UserName.Substring(0, 1).ToUpper();
                                var avatarColors = new[] { "bg-red-500", "bg-blue-500", "bg-green-500", "bg-yellow-500", "bg-purple-500", "bg-pink-500", "bg-indigo-500" };
                                var avatarColor = avatarColors[Math.Abs(comment.user.UserName.GetHashCode()) % avatarColors.Length];

                                <div class="px-6 py-5">
                                    <div class="flex flex-col sm:flex-row sm:space-x-4 space-y-4 sm:space-y-0">
                                        <div class="w-10 h-10 @avatarColor rounded-full flex items-center justify-center flex-shrink-0">
                                            <span class="text-white font-medium text-xs">@userInitials</span>
                                        </div>
                                        <div class="flex-1">
                                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-2 space-y-1 sm:space-y-0">
                                                <h4 class="text-base font-medium text-gray-900">@comment.user.UserName</h4>
                                                <span class="text-sm text-gray-500">@comment.PostedAt.ToString("g")</span>
                                            </div>
                                            <p class="text-gray-700 mb-3 leading-relaxed bg-gray-50 p-3 rounded-lg">@comment.Text</p>
                                            <div class="flex flex-col sm:flex-row sm:items-center sm:space-x-4 text-sm text-gray-500 space-y-2 sm:space-y-0">
                                                <div class="flex items-center space-x-4">
                                                    <button class="flex items-center space-x-1 hover:text-blue-600 transition-colors">
                                                        <i class="fas fa-thumbs-up"></i>
                                                        <span>Like</span>
                                                    </button>
                                                    <button class="hover:text-blue-600 transition-colors" onclick="toggleReplyInput(@comment.Id)">
                                                        <i class="fas fa-reply mr-1"></i>Reply
                                                    </button>
                                                </div>
                                            </div>

                                            <!-- Reply input hidden by default -->
                                            <div id="reply-input-@comment.Id" class="mt-3" style="display:none;">
                                                <form method="post" action="/Comments/Reply">
                                                    <input type="hidden" name="ParentCommentId" value="@comment.Id" />
                                                    <textarea name="ReplyText" rows="3" class="w-full p-2 border rounded" placeholder="Write a reply..."></textarea>
                                                    <button type="submit" class="mt-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Submit</button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                        }
                        else
                        {
                            <div class="px-6 py-8 text-center">
                                <div class="text-gray-400 mb-2">
                                    <i class="fas fa-comments text-3xl"></i>
                                </div>
                                <p class="text-gray-500 text-sm">No comments yet. Be the first to add a comment!</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="space-y-6">
                <!-- Submission Details -->
                <div class="bg-white shadow-sm rounded-lg overflow-hidden border border-gray-200">
                    <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
                        <h3 class="text-lg font-medium text-gray-900">Submission Details</h3>
                    </div>
                    <div class="px-4 py-4 space-y-4">
                        <div class="bg-blue-50 p-3 rounded-lg border border-blue-100">
                            <dt class="text-sm font-medium text-gray-500 mb-2">Template Information</dt>
                            <dd class="space-y-1">
                                <div class="text-sm text-gray-900 font-medium">Template ID: #@Model.TemplateId</div>
                                <div class="text-sm text-gray-600">@Model.Template.Title</div>
                            </dd>
                        </div>
                        <div class="bg-green-50 p-3 rounded-lg border border-green-100">
                            <dt class="text-sm font-medium text-gray-500 mb-2">User Details</dt>
                            <dd class="space-y-1">
                                <div class="text-sm text-gray-900 font-mono bg-white px-2 py-1 rounded">@Model.User.UserName</div>
                            </dd>
                        </div>
                      <div class="bg-purple-50 p-3 rounded-lg border border-purple-100">
                            <dt class="text-sm font-medium text-gray-500 mb-2">Completion Status</dt>
                            <dd>
                                <div class="flex items-center justify-between mb-2">
                                    <span class="text-sm text-gray-900">@Model.Answers.Count()/@Model.Template.Questions.Count() fields</span>
                                    <span class="text-sm font-medium text-green-600">@(Math.Round((double)Model.Answers.Count() / Model.Template.Questions.Count() * 100))%</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2">
                                    <div class="bg-green-500 h-2 rounded-full transition-all" style="width: @(Math.Round((double)Model.Answers.Count() / Model.Template.Questions.Count() * 100))%"></div>
                                </div>
                            </dd>
                        </div> 
                    
                    </div>
                </div>

                <!-- Quick Stats -->
                <div class="bg-white shadow-sm rounded-lg overflow-hidden border border-gray-200">
                    <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
                        <h3 class="text-lg font-medium text-gray-900">Quick Stats</h3>
                    </div>
                    <div class="px-4 py-4 space-y-3">
                        <div class="flex items-center justify-between py-1">
                            <span class="text-sm text-gray-600">Response Time</span>
                            <span class="text-sm font-medium text-gray-900 bg-gray-100 px-2 py-1 rounded">4 minutes</span>
                        </div>
                        <div class="flex items-center justify-between py-1">
                            <span class="text-sm text-gray-600">Form Views</span>
                            <span class="text-sm font-medium text-gray-900 bg-gray-100 px-2 py-1 rounded">1</span>
                        </div>
                        <div class="flex items-center justify-between py-1">
                            <span class="text-sm text-gray-600">Validation Errors</span>
                            <span class="text-sm font-medium text-green-600 bg-green-100 px-2 py-1 rounded">0</span>
                        </div>
                  
                        <div class="flex items-center justify-between py-1">
                            <span class="text-sm text-gray-600">Total Comments</span>
                            <span class="text-sm font-medium text-gray-900 bg-gray-100 px-2 py-1 rounded">@comments.Count()</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>


<script>
    function toggleReplyInput(commentId) {
      const inputDiv = document.getElementById('reply-input-' + commentId);
      if (!inputDiv) return;
      inputDiv.style.display = (inputDiv.style.display === 'block') ? 'none' : 'block';
    }
</script>
