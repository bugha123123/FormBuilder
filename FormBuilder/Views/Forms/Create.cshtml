@using FormBuilder.Enums
@using FormBuilder.Interface
@using FormBuilder.Models
@model FormBuilder.Models.Form
@inject IFormService _formService;
@inject ICommentService _commentService;

@{
    ViewData["Title"] = "Fill Out Form";
    var TemplateId = Context.Request.Query["TemplateId"];

 
}

<div class="min-h-screen bg-slate-50">
    <div class="max-w-7xl mx-auto px-4 py-8">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="text-3xl font-bold text-slate-900 mb-3">@Model.Template.Title</h1>
            <p class="text-slate-600 max-w-2xl mx-auto leading-relaxed">@Model.Template.Description</p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Main Form -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden">
                    <div class="p-8">
                        <form asp-action="Create" asp-controller="Forms" method="post">
                            <input type="hidden" name="TemplateId" value="@TemplateId" />

                            @if (TempData["Error"] != null)
                            {
                                <div class="mb-6 px-4 py-3 rounded-xl bg-red-50 border border-red-200 text-red-800">
                                    @TempData["Error"]
                                </div>
                            }

                            @for (int i = 0; i < Model.Template.Questions.Count; i++)
                            {
                                var question = Model.Template.Questions[i];
                                <div class="mb-8 last:mb-6">
                                    <label class="block text-slate-800 font-semibold mb-3 text-base">@question.Text</label>

                                    @switch (question.Type)
                                    {
                                        case QuestionType.ShortText:
                                            <input name="Answers[@i].Response[]" type="text"
                                                   class="w-full border border-slate-300 rounded-xl px-4 py-3 bg-slate-50 focus:bg-white focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all duration-200 text-slate-900" />
                                            break;

                                        case QuestionType.LongText:
                                            <textarea name="Answers[@i].Response[]" rows="4"
                                                      class="w-full border border-slate-300 rounded-xl px-4 py-3 bg-slate-50 focus:bg-white focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all duration-200 text-slate-900 resize-none"></textarea>
                                            break;

                                        case QuestionType.Number:
                                            <input name="Answers[@i].Response[]" type="number"
                                                   class="w-full border border-slate-300 rounded-xl px-4 py-3 bg-slate-50 focus:bg-white focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all duration-200 text-slate-900" />
                                            break;

                                        case QuestionType.Checkbox:
                                            <div class="space-y-3 mt-3">
                                                @foreach (var option in question.Options)
                                                {
                                                    <div class="flex items-center">
                                                        <input type="checkbox" name="Answers[@i].Response" value="@option" id="checkbox-@i-@option.GetHashCode()"
                                                               class="w-5 h-5 text-emerald-600 rounded-md border-slate-300 focus:ring-emerald-500 focus:ring-2" />
                                                        <label for="checkbox-@i-@option.GetHashCode()" class="ml-3 text-slate-700 font-medium">@option</label>
                                                    </div>
                                                }
                                            </div>
                                            break;

                                        case QuestionType.Dropdown:
                                            <div class="relative">
                                                <select name="Answers[@i].Response[]"
                                                        class="appearance-none w-full border border-slate-300 rounded-xl px-4 py-3 bg-slate-50 focus:bg-white focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all duration-200 pr-10 text-slate-900">
                                                    @foreach (var option in question.Options)
                                                    {
                                                        <option value="@option">@option</option>
                                                    }
                                                </select>
                                                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-slate-500">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                                    </svg>
                                                </div>
                                            </div>
                                            break;

                                        case QuestionType.OneFromList:
                                            <div class="space-y-3 mt-3">
                                                @foreach (var option in question.Options)
                                                {
                                                    <div class="flex items-center">
                                                        <input type="radio" name="Answers[@i].Response[]" value="@option" id="radio-@i-@option.GetHashCode()"
                                                               class="w-5 h-5 text-emerald-600 border-slate-300 focus:ring-emerald-500 focus:ring-2" />
                                                        <label for="radio-@i-@option.GetHashCode()" class="ml-3 text-slate-700 font-medium">@option</label>
                                                    </div>
                                                }
                                            </div>
                                            break;
                                    }

                                    <input type="hidden" name="Answers[@i].QuestionId" value="@question.Id" />
                                </div>
                            }

                            <div class="mt-8 pt-6 border-t border-slate-200">
                                <button type="submit" class="w-full btn-dark  sm:w-auto px-8 py-3 bg-emerald-600 text-white font-semibold rounded-xl hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 transition-all duration-200 shadow-sm">
                                    Submit Response
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="space-y-6">
                <!-- Comments Section -->
     

                <!-- Tags Section -->
                <div class="bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden">
                    <div class="p-6">
                        <h3 class="text-lg font-semibold text-slate-900 mb-4 flex items-center">
                            <svg class="w-5 h-5 mr-2 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                            </svg>
                            Tags (@(Model.Template.SavedTags?.Count ?? 0))
                        </h3>

                        @if (Model.Template.SavedTags != null && Model.Template.SavedTags.Any())
                        {
                            <div class="flex flex-wrap gap-2">
                                @foreach (var tag in Model.Template.SavedTags)
                                {
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-emerald-100 text-emerald-800">
                                        @tag
                                    </span>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-6">
                                <svg class="w-10 h-10 mx-auto text-slate-300 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                                </svg>
                                <p class="text-slate-500 font-medium">No tags available</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
